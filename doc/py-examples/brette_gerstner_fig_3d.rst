.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_py-examples_brette_gerstner_fig_3d.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_py-examples_brette_gerstner_fig_3d.py:

Test of the adapting exponential integrate and fire model in NEST
----------------------------------------------------------------------

This example tests the adaptive integrate and fire model (AdEx) according to
Brette and Gerstner (2005) J. Neurophysiology and
reproduces figure 3.D of the paper.

Note that Brette&Gerstner give the value for b in nA.
To be consistent with the other parameters in the equations, b must be
converted to pA (pico Ampere).

See Also
~~~~~~~~~~~

:Authors:

KEYWORDS:



.. code-block:: python
   :lineno-start: 41


    import nest
    import nest.voltage_trace
    import pylab

    nest.ResetKernel()







First we make sure that the resolution of the simulation is 0.1 ms. This is
 important, since the slop of the action potential is very steep.



.. code-block:: python
   :lineno-start: 51


    res = 0.1
    nest.SetKernelStatus({"resolution": res})
    neuron = nest.Create("aeif_cond_exp")







Set the parameters of the neuron according to the paper.



.. code-block:: python
   :lineno-start: 58


    nest.SetStatus(neuron, {"V_peak": 20., "E_L": -60.0, "a": 80.0, "b": 80.5,
                            "tau_w": 720.0})







Create and configure the stimulus which is a step current.



.. code-block:: python
   :lineno-start: 64


    dc = nest.Create("dc_generator")

    nest.SetStatus(dc, [{"amplitude": -800.0, "start": 0.0, "stop": 400.0}])







We connect the DC generators.



.. code-block:: python
   :lineno-start: 71


    nest.Connect(dc, neuron, 'all_to_all')







And add a voltmeter to record the membrane potentials.



.. code-block:: python
   :lineno-start: 76


    voltmeter = nest.Create("voltmeter")







We set the voltmeter to record in small intervals of 0.1 ms and connect the
 voltmeter to the neuron.



.. code-block:: python
   :lineno-start: 82


    nest.SetStatus(voltmeter, {"withgid": True, "withtime": True, 'interval': 0.1})

    nest.Connect(voltmeter, neuron)







Finally, we simulate for 1000 ms and plot a voltage trace to produce the
figure.



.. code-block:: python
   :lineno-start: 90


    nest.Simulate(1000.0)

    nest.voltage_trace.from_device(voltmeter)
    pylab.axis([0, 1000, -85, 0])



.. image:: /py-examples/images/sphx_glr_brette_gerstner_fig_3d_001.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  0.091 seconds)


.. _sphx_glr_download_py-examples_brette_gerstner_fig_3d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: brette_gerstner_fig_3d.py <brette_gerstner_fig_3d.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: brette_gerstner_fig_3d.ipynb <brette_gerstner_fig_3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
