.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_one_neuron.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_one_neuron.py:


One neuron example
------------------

This script simulates a neuron driven by a constant external current
and records its membrane potential.

KEYWORDS: iaf_psc_alpha, voltmeter


First, we import all necessary modules needed to simulate, analyze and
plot our example. Additionally, we set the verbosity to only show warnings
and reset the kernel.
Resetting the kernel removes any nodes we may have created previously and
resets the internal clock to zero. This allows us to execute the script
several times in a Python shell without interference from previous NEST
simulations.



.. code-block:: python
   :lineno-start: 41


    import nest
    import nest.voltage_trace

    nest.set_verbosity("M_WARNING")
    nest.ResetKernel()







Second, we create the nodes, in our case the neuron and measuring device,
using the `Create()` function.
We store the returned handles in variables for later reference.
We can indicate the number of nodes that we want as well. For example,
:code:`nest.Create('iaf_psc_alpha',5)`



.. code-block:: python
   :lineno-start: 54


    neuron = nest.Create("iaf_psc_alpha")
    voltmeter = nest.Create("voltmeter")







Third, the neuron and the voltmeter are configured using `SetStatus()`,
which expects a list of node handles and a list of parameter dictionaries.
In this example, we use `SetStatus()` to configure the constant current input
to the neuron. We also want to record the global id of the observed nodes and
set the `withgid` flag of the voltmeter to ``True``.
Alternatively, we can add the parameters of the model as arguments to
Create(), for example,
:code:`nest.Create("iaf_psc_alpha", params=[{'I_e':376.0}])`
or :code:`nest.Create("voltmeter", [{"withgid": True, "withtime": True}])`.



.. code-block:: python
   :lineno-start: 68


    nest.SetStatus(neuron, "I_e", 376.0)
    nest.SetStatus(voltmeter, [{"withgid": True}])







Fourth, we connect the neuron to the voltmeter. The order in which the
arguments to `Connect()` are specified reflects the flow of events in the
simulation kernel; in our case, the voltmeter periodically sends requests to
the neuron to ask for its membrane potential at that point in time.



.. code-block:: python
   :lineno-start: 77


    nest.Connect(voltmeter, neuron)







Now we simulate the network using `Simulate()`, which takes the
desired simulation time in milliseconds.



.. code-block:: python
   :lineno-start: 83


    nest.Simulate(1000.0)







Finally, we plot the neuron's membrane potential as a function of
time.



.. code-block:: python
   :lineno-start: 89


    nest.voltage_trace.from_device(voltmeter)



.. image:: /auto_examples/images/sphx_glr_one_neuron_001.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  0.386 seconds)


.. _sphx_glr_download_auto_examples_one_neuron.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: one_neuron.py <one_neuron.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: one_neuron.ipynb <one_neuron.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
