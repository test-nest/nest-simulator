Instructions for PyNEST API docstrings
=======================================================

.. admonition:: Important!

  If you want to contribute your PyNEST API to the NEST project, make sure you follow our :ref:`Git workflow <git_workflow>`.

.. pull-quote::

   These instructions are specifically for the docstring associated with functions in the PyNEST API.
   If you have created or modified the code of an API, please ensure that the docstring is up-to-date!


Format the API docstring
----------------------------

Use our template
~~~~~~~~~~~~~~~~~~~~~~

Copy the :doc:`pynest_api_template.py <pynest_api>` and carefully read the instructions.

Replace the template text with appropriate text for your example.


----

(Optional) Generate the documentation files for your docstring
---------------------------------------------------------------

To generate the HTML for python API docstrings, we use `sphinx autodoc <https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`_
and the `napoleon extension <https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`_,
which converts NumPy style docstrings to reStructured text.

If you want to check if your script generates HTML properly with sphinx,
you can run a sphinx environment and build the output files locally.


Install the prerequisites
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will need to have the following installed:

 * a :doc:`recent NEST build <../../../installation/index>`
 * `sphinx <https://www.sphinx-doc.org/en/master/index.html>`_


Alternatively, you can follow the instructions for :ref:`creating a new conda environment <local_install_docs>`, which includes all the dependencies to run sphinx and a NEST build.


Configure files to run autodoc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To review your API, we recommend the following workflow.

Create a directory for sphinx:

.. code-block:: bash

   mkdir sphinxtest_pynest_docstring/
   cd sphinxtest_pynest_docstring/

Run sphinx-quickstart.
You will be prompted to answer some set up questions on the command line.

.. code-block:: bash

   sphinx-quickstart

You can use some of the defaults by pressing enter after the question.
Indicate `yes` to enable the extensions autodoc, doctest, mathjax, and viewcode.

.. code-block:: console

 Indicate which of the following Sphinx extensions should be enabled:

 autodoc: automatically insert docstrings from modules (y/n) [n]: y
 mathjax: include math, rendered in the browser by MathJax (y/n) [n]: y
 viewcode: include links to the source code of documented Python objects (y/n) [n]: y


Sphinx will create a ``_build`` directory as well as the following files:

* ``./conf.py``
* ``./index.rst``
* ``./Makefile``

Now let's configure sphinx to generate APIs.

Open ``conf.py``

Uncomment the following lines:

.. code-block:: python
   :lineno-start: 15

   # import os
   # import sys
   # sys.path.insert(0, os.path.abspath('.'))

And indicate the path to your PyNEST API (this must be PyNEST API directory in the NEST source directory):

.. code-block:: python
   :lineno-start: 15

   import os
   import sys
   sys.path.insert(0, os.path.abspath('<path/to/nest-simulator>/pynest/nest')

Add ``napoleon`` to the extensions:

.. code-block:: python
   :lineno-start: 41

   extensions = ['sphinx.ext.napoleon',
                 'sphinx.ext.autodoc',
                 'sphinx.ext.mathjax',
                 'sphinx.ext.viewcode',
   ]

Save and close the ``conf.py``.

On the command line, run `sphinx-apidoc` to generate the reStructured text files that sphinx wil use
to build the HTML (**Don't forget to rename the path to your NEST project directory**):

.. code-block:: bash

   sphinx-apidoc -f -o apis_output/ </path/to/nest-simulator>/pynest/nest

``apis_output`` is the directory where you'll find the reStructured text files.

Open the ``index.rst`` file and include apis_output/nest.lib to the table of contents:

.. code-block:: rest
   :lineno-start: 9

   .. toctree::
      :maxdepth: 2
      :caption: Contents

      apis_output/nest.lib


Save and close the ``index.rst`` file.

Now all necessary files should be configured correctly, and you can generate the HTML:

.. code-block:: bash

   make html

If it's successful, the ``_build`` directory will contain the HTML files and a ``apis_output`` directory
will appear and contain the autogenerated rst files.

.. note::

  If the build fails because "nest module not found", your path variables may not be set correctly.
  This may also be the case if Python cannot load the nest module due to missing or incompatible libraries.
  In this case, please run
  ``source </path/to/nest_install_dir>/bin/nest_vars.sh``

View the HTML by running

.. code-block:: sh

   xdg-open _build/html/index.html


In your browser, you should see a generic `Welcome to project_name's documentation` page with a link to the PyNEST modules.

.. note::

   This webpage will NOT look like the NEST documentation website because we have not set up the same theme
   in your test case. The theme NEST uses is ``sphinx_rtd_theme``. To replace the theme go to https://sphinx-rtd-theme.readthedocs.io/en/latest/installing.html



Find the section of the API you made changes to and check that

* the docstring text is present and formatted like the other docstrings (e.g., spacing, font, size)
* any math is rendered nicely in HTML (the mathjax extension allows for this)
* if you have a `See Also` section, the link to the other functions works correctly
* content is clear, and there are no grammar mistakes

Next steps
-----------

When you feel that your PyNEST script is ready for review, you can :ref:`make a pull reqest <pull_requests>`.

